- Started, = Incomplete, * Completed

* Create IRType table, no type linking
* Create IRFields, link to owner IRType
* Create IRInterfaceImplementations, link to owner IRType
* Create IRMethods, link to owner IRType
* Create IRParameters, link to owner IRMethod
* Create IRLocals, link to owner IRMethod
* Link nested IRTypes to enclosing IRType
* Cache CORLibrary common IRTypes

* Create Pointer dynamic IRTypes
* Create Array dynamic IRTypes
* Create Generic dynamic IRTypes, using generic placeholders
* Resolver for TypeDef to IRType
* Resolver for TypeRef to IRType
* Resolver for TypeSpec to IRType, using generic placeholders
* Resolver for TypeDefRefOrSpecIndex to IRType, using generic placeholders
* Resolver for MetadataToken to IRType, using generic placeholders
* Resolver for SigType to IRType, using generic placeholders
* Resolver for SigRetType to IRType, using generic placeholders
* Resolver for SigParam to IRType, using generic placeholders
* Link IRType to base IRType
* Link IRField type
* Link IRInterfaceImplementation type
* Link IRMethod return type
* Link IRMethod parameter types
* Link IRLocal types

* Decomposition of ILInstructions into IRInstructions

Create IRGenericInstantiations for IRTypes
Create IRGenericInstantiations for IRField types
Create IRGenericInstantiations for IRMethod return and parameter types
Create IRGenericInstantiations for IRLocal types

- Build control flow graph required for linearization of values remaining from inside branches
= Linearization of IRInstructions
Transform Load/Store to Move IRInstructions
Transform instructions that behave like other instructions under certain conditions, IE unbox.any to castclass when dealing with a reference type

Resolve internal calls
Generate internal calls

Layout IRField type sizes for IRTypes
Layout IRLocal type sizes for IRMethods
Resolve IRInterfaceImplementation methods
Create virtual tree

Optimizations

Assemble IRInstructions

Building binary output
